// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// AuthLoginRequest defines model for AuthLoginRequest.
type AuthLoginRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// AuthLoginResponse defines model for AuthLoginResponse.
type AuthLoginResponse struct {
	Token string `json:"token"`
}

// Class defines model for Class.
type Class struct {
	// CreatedAt An RFC3339 date/time string
	CreatedAt   DateTime `json:"createdAt"`
	Description string   `json:"description"`
	DisplayName string   `json:"displayName"`

	// Id A cuid
	Id   Cuid   `json:"id"`
	Name string `json:"name"`

	// UpdatedAt An RFC3339 date/time string
	UpdatedAt DateTime `json:"updatedAt"`
}

// ClassList An array of Classes
type ClassList = []Class

// ClassesCreateRequest defines model for ClassesCreateRequest.
type ClassesCreateRequest struct {
	// Description The description of the Class
	Description *string `json:"description,omitempty"`

	// DisplayName The display name of the Class
	DisplayName string `json:"displayName"`

	// Name The name of the Class
	Name *string `json:"name,omitempty"`
}

// ClassesCreateResponse defines model for ClassesCreateResponse.
type ClassesCreateResponse struct {
	Class Class `json:"class"`
}

// ClassesListResponse The response for the /v1/classes endpoint
type ClassesListResponse struct {
	// Classes An array of Classes
	Classes    ClassList      `json:"classes"`
	Pagination PaginationData `json:"pagination"`
}

// ClassesUpdateRequest defines model for ClassesUpdateRequest.
type ClassesUpdateRequest struct {
	// Description The description of the Class
	Description *string `json:"description,omitempty"`

	// DisplayName The display name of the Class
	DisplayName *string `json:"displayName,omitempty"`

	// Name The name of the Class
	Name *string `json:"name,omitempty"`
}

// ClassesUpdateResponse defines model for ClassesUpdateResponse.
type ClassesUpdateResponse struct {
	Class Class `json:"class"`
}

// Cuid A cuid
type Cuid = string

// DateTime An RFC3339 date/time string
type DateTime = string

// Error defines model for Error.
type Error struct {
	// Code The HTTP error code
	Code int `json:"code"`

	// Message A human readable error message
	Message string `json:"message"`
}

// PaginationData defines model for PaginationData.
type PaginationData struct {
	FirstUrl string `json:"firstUrl"`
	LastUrl  string `json:"lastUrl"`
	NextUrl  string `json:"nextUrl"`
	Page     int    `json:"page"`
	PerPage  int    `json:"perPage"`
	PrevUrl  string `json:"prevUrl"`
	Total    int    `json:"total"`
}

// Student defines model for Student.
type Student struct {
	// CreatedAt An RFC3339 date/time string
	CreatedAt DateTime `json:"createdAt"`
	FullName  string   `json:"fullName"`

	// Id A cuid
	Id Cuid `json:"id"`

	// UpdatedAt An RFC3339 date/time string
	UpdatedAt DateTime `json:"updatedAt"`
}

// StudentList An array of Students
type StudentList = []Student

// StudentsCreateRequest defines model for StudentsCreateRequest.
type StudentsCreateRequest struct {
	FullName string `json:"fullName"`
}

// StudentsCreateResponse defines model for StudentsCreateResponse.
type StudentsCreateResponse struct {
	Student Student `json:"student"`
}

// StudentsListResponse The response for the /v1/teachers endpoint
type StudentsListResponse struct {
	Pagination PaginationData `json:"pagination"`

	// Students An array of Students
	Students StudentList `json:"students"`
}

// StudentsUpdateRequest defines model for StudentsUpdateRequest.
type StudentsUpdateRequest struct {
	FullName string `json:"fullName"`
}

// StudentsUpdateResponse defines model for StudentsUpdateResponse.
type StudentsUpdateResponse struct {
	Student Student `json:"student"`
}

// Teacher defines model for Teacher.
type Teacher struct {
	// CreatedAt An RFC3339 date/time string
	CreatedAt DateTime `json:"createdAt"`
	Email     string   `json:"email"`
	FullName  string   `json:"fullName"`

	// Id A cuid
	Id Cuid `json:"id"`

	// UpdatedAt An RFC3339 date/time string
	UpdatedAt DateTime `json:"updatedAt"`
}

// TeacherList An array of Teachers
type TeacherList = []Teacher

// TeachersCreateRequest defines model for TeachersCreateRequest.
type TeachersCreateRequest struct {
	Email    string `json:"email"`
	FullName string `json:"fullName"`
}

// TeachersCreateResponse defines model for TeachersCreateResponse.
type TeachersCreateResponse struct {
	Teacher Teacher `json:"teacher"`
}

// TeachersListResponse The response for the /v1/teachers endpoint
type TeachersListResponse struct {
	Pagination PaginationData `json:"pagination"`

	// Teachers An array of Teachers
	Teachers TeacherList `json:"teachers"`
}

// TeachersUpdateRequest defines model for TeachersUpdateRequest.
type TeachersUpdateRequest struct {
	Email    string `json:"email"`
	FullName string `json:"fullName"`
}

// TeachersUpdateResponse defines model for TeachersUpdateResponse.
type TeachersUpdateResponse struct {
	Teacher Teacher `json:"teacher"`
}

// ClassesListParams defines parameters for ClassesList.
type ClassesListParams struct {
	// PerPage The number of results to retrieve in each page.
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`

	// Page The page to load.
	Page *int `form:"page,omitempty" json:"page,omitempty"`
}

// StudentsListParams defines parameters for StudentsList.
type StudentsListParams struct {
	// PerPage The number of results to retrieve in each page.
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`

	// Page The page to load.
	Page *int `form:"page,omitempty" json:"page,omitempty"`
}

// TeachersListParams defines parameters for TeachersList.
type TeachersListParams struct {
	// PerPage The number of results to retrieve in each page.
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`

	// Page The page to load.
	Page *int `form:"page,omitempty" json:"page,omitempty"`
}

// AuthLoginJSONRequestBody defines body for AuthLogin for application/json ContentType.
type AuthLoginJSONRequestBody = AuthLoginRequest

// ClassesCreateJSONRequestBody defines body for ClassesCreate for application/json ContentType.
type ClassesCreateJSONRequestBody = ClassesCreateRequest

// ClassesUpdateJSONRequestBody defines body for ClassesUpdate for application/json ContentType.
type ClassesUpdateJSONRequestBody = ClassesUpdateRequest

// StudentsCreateJSONRequestBody defines body for StudentsCreate for application/json ContentType.
type StudentsCreateJSONRequestBody = StudentsCreateRequest

// StudentsUpdateJSONRequestBody defines body for StudentsUpdate for application/json ContentType.
type StudentsUpdateJSONRequestBody = StudentsUpdateRequest

// TeachersCreateJSONRequestBody defines body for TeachersCreate for application/json ContentType.
type TeachersCreateJSONRequestBody = TeachersCreateRequest

// TeachersUpdateJSONRequestBody defines body for TeachersUpdate for application/json ContentType.
type TeachersUpdateJSONRequestBody = TeachersUpdateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Generate a JWT to use as a bearer token for authentication.
	// (POST /v1/auth/login)
	AuthLogin(c *gin.Context)
	// Use a JWT to get the currently-authenticated user.
	// (GET /v1/auth/me)
	AuthCurrentUser(c *gin.Context)
	// List all classes
	// (GET /v1/classes)
	ClassesList(c *gin.Context, params ClassesListParams)
	// Create a new class
	// (POST /v1/classes)
	ClassesCreate(c *gin.Context)
	// Delete a class by its CUID
	// (DELETE /v1/classes/{id})
	ClassesDelete(c *gin.Context, id Cuid)
	// Get a class by its CUID
	// (GET /v1/classes/{id})
	ClassesGet(c *gin.Context, id Cuid)
	// Update a class by its CUID
	// (PATCH /v1/classes/{id})
	ClassesUpdate(c *gin.Context, id Cuid)
	// List all students
	// (GET /v1/students)
	StudentsList(c *gin.Context, params StudentsListParams)
	// Create a new student
	// (POST /v1/students)
	StudentsCreate(c *gin.Context)
	// Delete a student by its CUID
	// (DELETE /v1/students/{id})
	StudentsDelete(c *gin.Context, id Cuid)
	// Get a student by its CUID
	// (GET /v1/students/{id})
	StudentsGet(c *gin.Context, id Cuid)
	// Update a student by its CUID
	// (PATCH /v1/students/{id})
	StudentsUpdate(c *gin.Context, id Cuid)
	// List all teachers
	// (GET /v1/teachers)
	TeachersList(c *gin.Context, params TeachersListParams)
	// Create a new teacher
	// (POST /v1/teachers)
	TeachersCreate(c *gin.Context)
	// Delete a teacher by its CUID
	// (DELETE /v1/teachers/{id})
	TeachersDelete(c *gin.Context, id Cuid)
	// Get a teacher by its CUID
	// (GET /v1/teachers/{id})
	TeachersGet(c *gin.Context, id Cuid)
	// Update a teacher by its CUID
	// (PATCH /v1/teachers/{id})
	TeachersUpdate(c *gin.Context, id Cuid)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// AuthLogin operation middleware
func (siw *ServerInterfaceWrapper) AuthLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.AuthLogin(c)
}

// AuthCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) AuthCurrentUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.AuthCurrentUser(c)
}

// ClassesList operation middleware
func (siw *ServerInterfaceWrapper) ClassesList(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ClassesListParams

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter perPage: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ClassesList(c, params)
}

// ClassesCreate operation middleware
func (siw *ServerInterfaceWrapper) ClassesCreate(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ClassesCreate(c)
}

// ClassesDelete operation middleware
func (siw *ServerInterfaceWrapper) ClassesDelete(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Cuid

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ClassesDelete(c, id)
}

// ClassesGet operation middleware
func (siw *ServerInterfaceWrapper) ClassesGet(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Cuid

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ClassesGet(c, id)
}

// ClassesUpdate operation middleware
func (siw *ServerInterfaceWrapper) ClassesUpdate(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Cuid

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ClassesUpdate(c, id)
}

// StudentsList operation middleware
func (siw *ServerInterfaceWrapper) StudentsList(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StudentsListParams

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter perPage: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.StudentsList(c, params)
}

// StudentsCreate operation middleware
func (siw *ServerInterfaceWrapper) StudentsCreate(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.StudentsCreate(c)
}

// StudentsDelete operation middleware
func (siw *ServerInterfaceWrapper) StudentsDelete(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Cuid

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.StudentsDelete(c, id)
}

// StudentsGet operation middleware
func (siw *ServerInterfaceWrapper) StudentsGet(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Cuid

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.StudentsGet(c, id)
}

// StudentsUpdate operation middleware
func (siw *ServerInterfaceWrapper) StudentsUpdate(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Cuid

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.StudentsUpdate(c, id)
}

// TeachersList operation middleware
func (siw *ServerInterfaceWrapper) TeachersList(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TeachersListParams

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter perPage: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.TeachersList(c, params)
}

// TeachersCreate operation middleware
func (siw *ServerInterfaceWrapper) TeachersCreate(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.TeachersCreate(c)
}

// TeachersDelete operation middleware
func (siw *ServerInterfaceWrapper) TeachersDelete(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Cuid

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.TeachersDelete(c, id)
}

// TeachersGet operation middleware
func (siw *ServerInterfaceWrapper) TeachersGet(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Cuid

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.TeachersGet(c, id)
}

// TeachersUpdate operation middleware
func (siw *ServerInterfaceWrapper) TeachersUpdate(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Cuid

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.TeachersUpdate(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/v1/auth/login", wrapper.AuthLogin)

	router.GET(options.BaseURL+"/v1/auth/me", wrapper.AuthCurrentUser)

	router.GET(options.BaseURL+"/v1/classes", wrapper.ClassesList)

	router.POST(options.BaseURL+"/v1/classes", wrapper.ClassesCreate)

	router.DELETE(options.BaseURL+"/v1/classes/:id", wrapper.ClassesDelete)

	router.GET(options.BaseURL+"/v1/classes/:id", wrapper.ClassesGet)

	router.PATCH(options.BaseURL+"/v1/classes/:id", wrapper.ClassesUpdate)

	router.GET(options.BaseURL+"/v1/students", wrapper.StudentsList)

	router.POST(options.BaseURL+"/v1/students", wrapper.StudentsCreate)

	router.DELETE(options.BaseURL+"/v1/students/:id", wrapper.StudentsDelete)

	router.GET(options.BaseURL+"/v1/students/:id", wrapper.StudentsGet)

	router.PATCH(options.BaseURL+"/v1/students/:id", wrapper.StudentsUpdate)

	router.GET(options.BaseURL+"/v1/teachers", wrapper.TeachersList)

	router.POST(options.BaseURL+"/v1/teachers", wrapper.TeachersCreate)

	router.DELETE(options.BaseURL+"/v1/teachers/:id", wrapper.TeachersDelete)

	router.GET(options.BaseURL+"/v1/teachers/:id", wrapper.TeachersGet)

	router.PATCH(options.BaseURL+"/v1/teachers/:id", wrapper.TeachersUpdate)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"WecQk2lHAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
