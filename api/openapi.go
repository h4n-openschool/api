// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// Class defines model for Class.
type Class struct {
	// CreatedAt An RFC3339 date/time string
	CreatedAt   DateTime `json:"createdAt"`
	Description string   `json:"description"`
	DisplayName string   `json:"displayName"`

	// Id A cuid
	Id   Cuid   `json:"id"`
	Name string `json:"name"`

	// UpdatedAt An RFC3339 date/time string
	UpdatedAt DateTime `json:"updatedAt"`
}

// ClassList An array of Classes
type ClassList = []Class

// ClassesCreateRequest defines model for ClassesCreateRequest.
type ClassesCreateRequest struct {
	// Description The description of the Class
	Description *string `json:"description,omitempty"`

	// DisplayName The display name of the Class
	DisplayName string `json:"displayName"`

	// Name The name of the Class
	Name *string `json:"name,omitempty"`
}

// ClassesCreateResponse defines model for ClassesCreateResponse.
type ClassesCreateResponse struct {
	Class Class `json:"class"`
}

// ClassesListResponse The response for the /v1/classes endpoint
type ClassesListResponse struct {
	// Classes An array of Classes
	Classes    ClassList      `json:"classes"`
	Pagination PaginationData `json:"pagination"`
}

// Cuid A cuid
type Cuid = string

// DateTime An RFC3339 date/time string
type DateTime = string

// Error defines model for Error.
type Error struct {
	// Code The HTTP error code
	Code int `json:"code"`

	// Message A human readable error message
	Message string `json:"message"`
}

// PaginationData defines model for PaginationData.
type PaginationData struct {
	FirstUrl string `json:"firstUrl"`
	LastUrl  string `json:"lastUrl"`
	NextUrl  string `json:"nextUrl"`
	Page     int    `json:"page"`
	PerPage  int    `json:"perPage"`
	PrevUrl  string `json:"prevUrl"`
	Total    int    `json:"total"`
}

// ClassesListParams defines parameters for ClassesList.
type ClassesListParams struct {
	// PerPage The number of results to retrieve in each page.
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`

	// Page The page to load.
	Page *int `form:"page,omitempty" json:"page,omitempty"`
}

// ClassesCreateJSONRequestBody defines body for ClassesCreate for application/json ContentType.
type ClassesCreateJSONRequestBody = ClassesCreateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all classes
	// (GET /v1/classes)
	ClassesList(c *gin.Context, params ClassesListParams)
	// Create a new class
	// (POST /v1/classes)
	ClassesCreate(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ClassesList operation middleware
func (siw *ServerInterfaceWrapper) ClassesList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ClassesListParams

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter perPage: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ClassesList(c, params)
}

// ClassesCreate operation middleware
func (siw *ServerInterfaceWrapper) ClassesCreate(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ClassesCreate(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/classes", wrapper.ClassesList)

	router.POST(options.BaseURL+"/v1/classes", wrapper.ClassesCreate)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xW32/bNhD+VwhuwF7UWLJjtBUwDGm6YQG2JujSPazIw0U8WwzEHyEp117h/30gJVuS",
	"RcdZ1w17s2Tdfd999/GOn2mhhFYSpbM0/0xtUaKA8POyAht+aKM0GscxPBUGwSG7cP7hW4MLmtNvJl2W",
	"SZti8hYc3nKBdJtQhrYwXDuupA/DNQhdIc3pG7C8IAJcaUkRABPqNtr/ZZ3hchmiudUVbN6BwGH0ryEu",
	"S7NYFGenGF7WnPkv5ShxIHQt8bq8lhhLXmv2d1XYJtTgY80NMpp/9PRa5GGBQ7GSnt591Ls9J3X/gIXz",
	"nELDfuE2cBooTi8kAWNgQ9SChM/QC80dCntSpNCV7R4v5NnDob0M/N7jY40N8tAuB50f0rotkfTeeHau",
	"xIYhTf6hTSJQzQfEq34c60lTyaPJn056wlAH3uhXcrTTnfRWK2kxclR3J/gZ/T1g0IQ+ge191kceC2La",
	"f8lCmaDKZJVNiiaaoGRacelNHeGMz2MdvL5NqIYll7Cz2FNhN/sv34KDUdW9RMmeSVSEupkuB6eMFHU4",
	"1l3fi4eKTYuHdZmmafr4pxHy1SzjL42MmWs/K2Ln9/1Pl7PZ7DXxE2DiuEDSBvbhstev5i/S8xfZ9HY6",
	"y6dpPk/P5tM/YmA/GqNMxDOKHennz7e3NwR9FAkf9XDP0/M9ApcOl2g8hEBrYRkrh5S1AEkMAoP7Ctu0",
	"u+/7Fb1TjixULdnJQ9OS2iWJte2g/aPiF9xY98FUw2XQ8+0PGpb4fXQyVPCc0Fl0qOD6S0N1q+8+bppQ",
	"wSUXtaB5FmuKRnMzCponVMC6jUrTkzkMrr5QJqccDANfzntw6RhufEZ9m3dl7DJ2Knb0kq6hXX/GvvAI",
	"XC7U2KdX0qGBwpFP3JVko2pDipJXzKC03xGHUJRoLAHJ/IDjhrT1n3la3AVZrjXK34pSqYpc3FzRhK7Q",
	"2CZ9dpaepV4UpVGC5jSns/DK99WVwZI9Vf3jEsOO9aYNPr5iNO+P5BBqQKBDY2n+MbqpanGPxu8qg7au",
	"nCVOEYPOcFwh4ZL4uojX2dfBfdhjjWazu6/kPfGbweopjdsWw/ZZPVylgB3NfjL1nbdEs12CKtM0bWaX",
	"dCiDQKB1xYsg0eTBNouhS3hysxzst2CRwxFWceu8iLuV5l3QLRDC0AGvws1p/hXpNWM7QuiDxLXGwiFr",
	"pmk4OLYWAsyG5tTXQ6CqdnS9Q2Fp97s+vFll9M4fb2WPu6y5dNDmUKJ1bxTbfG3xh3fK7XAEOFPjdmSA",
	"7N/icNwC3s/t7bxRNSFa6boKL8LEEOiAgYMz74Lz/8IFv0PFWWPA1gX/D/s1ahIgEj91N/i4Abfb7V8B",
	"AAD//4Ur4LqXDgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
