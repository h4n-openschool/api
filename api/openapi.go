// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// Class defines model for Class.
type Class struct {
	// CreatedAt An RFC3339 date/time string
	CreatedAt   DateTime `json:"createdAt"`
	Description string   `json:"description"`
	DisplayName string   `json:"displayName"`

	// Id A cuid
	Id   Cuid   `json:"id"`
	Name string `json:"name"`

	// UpdatedAt An RFC3339 date/time string
	UpdatedAt DateTime `json:"updatedAt"`
}

// ClassList An array of Classes
type ClassList = []Class

// ClassesCreateRequest defines model for ClassesCreateRequest.
type ClassesCreateRequest struct {
	// Description The description of the Class
	Description *string `json:"description,omitempty"`

	// DisplayName The display name of the Class
	DisplayName string `json:"displayName"`

	// Name The name of the Class
	Name *string `json:"name,omitempty"`
}

// ClassesCreateResponse defines model for ClassesCreateResponse.
type ClassesCreateResponse struct {
	Class Class `json:"class"`
}

// ClassesListResponse The response for the /v1/classes endpoint
type ClassesListResponse struct {
	// Classes An array of Classes
	Classes    ClassList      `json:"classes"`
	Pagination PaginationData `json:"pagination"`
}

// Cuid A cuid
type Cuid = string

// DateTime An RFC3339 date/time string
type DateTime = string

// Error defines model for Error.
type Error struct {
	// Code The HTTP error code
	Code int `json:"code"`

	// Message A human readable error message
	Message string `json:"message"`
}

// PaginationData defines model for PaginationData.
type PaginationData struct {
	FirstUrl string `json:"firstUrl"`
	LastUrl  string `json:"lastUrl"`
	NextUrl  string `json:"nextUrl"`
	Page     int    `json:"page"`
	PerPage  int    `json:"perPage"`
	PrevUrl  string `json:"prevUrl"`
	Total    int    `json:"total"`
}

// ClassesListParams defines parameters for ClassesList.
type ClassesListParams struct {
	// PerPage The number of results to retrieve in each page.
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`

	// Page The page to load.
	Page *int `form:"page,omitempty" json:"page,omitempty"`
}

// ClassesCreateJSONRequestBody defines body for ClassesCreate for application/json ContentType.
type ClassesCreateJSONRequestBody = ClassesCreateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all classes
	// (GET /v1/classes)
	ClassesList(c *gin.Context, params ClassesListParams)
	// Create a new class
	// (POST /v1/classes)
	ClassesCreate(c *gin.Context)
	// Get a clas by its CUID
	// (GET /v1/classes/{id})
	ClassesGet(c *gin.Context, id Cuid)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ClassesList operation middleware
func (siw *ServerInterfaceWrapper) ClassesList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ClassesListParams

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter perPage: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ClassesList(c, params)
}

// ClassesCreate operation middleware
func (siw *ServerInterfaceWrapper) ClassesCreate(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ClassesCreate(c)
}

// ClassesGet operation middleware
func (siw *ServerInterfaceWrapper) ClassesGet(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Cuid

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ClassesGet(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/classes", wrapper.ClassesList)

	router.POST(options.BaseURL+"/v1/classes", wrapper.ClassesCreate)

	router.GET(options.BaseURL+"/v1/classes/:id", wrapper.ClassesGet)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xX0W/bthP+Vwj+fsBeVFu2Y7QVMAxpsnUBtiTokj2syMNFPFsMJJIhT068wP/7QEq2",
	"JUuOs7YZ+mZJvLvvvvvujn7iqS6MVqjI8eSJuzTDAsLPkxxc+GGsNmhJYnhKLQKhOCb/8H+LM57w/w23",
	"Xoa1i+EpEF7JAvkq4gJdaqUhqZU3w0coTI484R/AyZQVQJljaQgYcVoa/8mRlWoerKUzOSzPocC29e/B",
	"bhSP+qykOITwpJTCn1QdxwHQhcKL7EJhn/PSiH/LwiriFu9LaVHw5LOHV0duJ9gmK2rw3Yx6s8Gkb+8w",
	"JY8pFOw36QKmFuP8WDGwFpZMz1g4hp5oSVi4gySFqqw28YKfTTh0JwHfJ7wvsYrclstO5duwrjJkjTce",
	"HWVYIeTRV8qkJ1R1gHnW98d6VlRqr/PnnR4Q1I42mpnsrfSWeme0ctjTqusOfkF9dxBUps/E9jprRu4S",
	"YuuvbKZtYGW4GA3TypqhEkZL5UXdgxlfhjpofRVxA3OpYC2x58wuNydPgaCTdcNRtEHSS0JZTZedLmNp",
	"Gdp6W/f0Lhfj9O4xi+M4vv/bFurdZCTfWtUnrs2s6OvfT7+cTCaT98xPgCHJAllt2Aw3ev9u+iY+ejMa",
	"X40nyThOpvFgOv6rL9jP1mrboxkt9tTz16urS4beioVDjbhH8dEmglSEc7Q+RIHOwbwvHZaVBShmEQTc",
	"5li7XZ9vZnSuic10qcTBpqlBrZ30lW2n/J3kZ9I6urZ5exk0dPuTgTn+2DsZcniJ6aR3qODjl5qamt+N",
	"3TjihVSyKAuejPqKYtBedoymES/gsbaK44M+LC6+kCbSBG3Dt9NGuLgbrtujvszrNNYetyxu4UXbgm7r",
	"09WFjyDVTHd1eqYILaTEHiRlbKlLy9JM5sKicj8wQkgztI6BEn7AScvq/AcelqRAy4VB9UeaaZ2z48sz",
	"HvEFWle5Hw3iQexJ0QYVGMkTPgmvfF0pC5JssOof5xh2rBdt0PGZ4ElzJAdTCwUSWseTz72bqixu0fpd",
	"ZdGVOTlGmlkkK3GBTCrm82KeZ5+H9Gb3Jdrl+r6SNMivBquH1C1bX2zv1YfLNYi93g+6vvGSqLZLYGUc",
	"x9XsUoQqEATG5DINFA3vXLUYtg4Pbpad/RYksjvCcunIk7heaV4F2wXCBBLIPNycpt8QXjW2ewBdK3w0",
	"mBKKapqGxnFlUYBd8oT7fBjk+RquVyjM3WbXhzeLEb/x7a3dfpVVlw5eNSU6+qDF8luT375TrtojgGyJ",
	"q44ARq+FYb8EvJ7r23nFasSMNmUeXoSJUSCBAIKBV8HRf6GCPyGXohJgrYLvQ34VmwyYwoftDb5fgKuo",
	"OfWGT1KsDo2+j9gz+cJs8YN0O1rC7awtpeilsgh/Fr969Lz6DX2PTv3p6iK1uY+fXJ+dMmP1QgoUtUSP",
	"Xl8p57pG8wBrRKFZKANiZ6eD70WyH5EYBKjsdskkuUDYM7Jdrf4JAAD//yW+xyBOEQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
