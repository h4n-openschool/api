// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// Class defines model for Class.
type Class struct {
	// CreatedAt An RFC3339 date/time string
	CreatedAt   DateTime `json:"createdAt"`
	Description string   `json:"description"`
	DisplayName string   `json:"displayName"`

	// Id A cuid
	Id   Cuid   `json:"id"`
	Name string `json:"name"`

	// UpdatedAt An RFC3339 date/time string
	UpdatedAt DateTime `json:"updatedAt"`
}

// ClassList An array of Classes
type ClassList = []Class

// ClassesCreateRequest defines model for ClassesCreateRequest.
type ClassesCreateRequest struct {
	// Description The description of the Class
	Description *string `json:"description,omitempty"`

	// DisplayName The display name of the Class
	DisplayName string `json:"displayName"`

	// Name The name of the Class
	Name *string `json:"name,omitempty"`
}

// ClassesCreateResponse defines model for ClassesCreateResponse.
type ClassesCreateResponse struct {
	Class Class `json:"class"`
}

// ClassesListResponse The response for the /v1/classes endpoint
type ClassesListResponse struct {
	// Classes An array of Classes
	Classes    ClassList      `json:"classes"`
	Pagination PaginationData `json:"pagination"`
}

// ClassesUpdateRequest defines model for ClassesUpdateRequest.
type ClassesUpdateRequest struct {
	// Description The description of the Class
	Description *string `json:"description,omitempty"`

	// DisplayName The display name of the Class
	DisplayName *string `json:"displayName,omitempty"`

	// Name The name of the Class
	Name *string `json:"name,omitempty"`
}

// ClassesUpdateResponse defines model for ClassesUpdateResponse.
type ClassesUpdateResponse struct {
	Class Class `json:"class"`
}

// Cuid A cuid
type Cuid = string

// DateTime An RFC3339 date/time string
type DateTime = string

// Error defines model for Error.
type Error struct {
	// Code The HTTP error code
	Code int `json:"code"`

	// Message A human readable error message
	Message string `json:"message"`
}

// PaginationData defines model for PaginationData.
type PaginationData struct {
	FirstUrl string `json:"firstUrl"`
	LastUrl  string `json:"lastUrl"`
	NextUrl  string `json:"nextUrl"`
	Page     int    `json:"page"`
	PerPage  int    `json:"perPage"`
	PrevUrl  string `json:"prevUrl"`
	Total    int    `json:"total"`
}

// ClassesListParams defines parameters for ClassesList.
type ClassesListParams struct {
	// PerPage The number of results to retrieve in each page.
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`

	// Page The page to load.
	Page *int `form:"page,omitempty" json:"page,omitempty"`
}

// ClassesCreateJSONRequestBody defines body for ClassesCreate for application/json ContentType.
type ClassesCreateJSONRequestBody = ClassesCreateRequest

// ClassesUpdateJSONRequestBody defines body for ClassesUpdate for application/json ContentType.
type ClassesUpdateJSONRequestBody = ClassesUpdateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all classes
	// (GET /v1/classes)
	ClassesList(c *gin.Context, params ClassesListParams)
	// Create a new class
	// (POST /v1/classes)
	ClassesCreate(c *gin.Context)
	// Get a class by its CUID
	// (GET /v1/classes/{id})
	ClassesGet(c *gin.Context, id Cuid)
	// Update a class by its CUID
	// (PATCH /v1/classes/{id})
	ClassesUpdate(c *gin.Context, id Cuid)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ClassesList operation middleware
func (siw *ServerInterfaceWrapper) ClassesList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ClassesListParams

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter perPage: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ClassesList(c, params)
}

// ClassesCreate operation middleware
func (siw *ServerInterfaceWrapper) ClassesCreate(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ClassesCreate(c)
}

// ClassesGet operation middleware
func (siw *ServerInterfaceWrapper) ClassesGet(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Cuid

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ClassesGet(c, id)
}

// ClassesUpdate operation middleware
func (siw *ServerInterfaceWrapper) ClassesUpdate(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Cuid

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ClassesUpdate(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/classes", wrapper.ClassesList)

	router.POST(options.BaseURL+"/v1/classes", wrapper.ClassesCreate)

	router.GET(options.BaseURL+"/v1/classes/:id", wrapper.ClassesGet)

	router.PATCH(options.BaseURL+"/v1/classes/:id", wrapper.ClassesUpdate)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYX2/bthf9KgR/P2Avqi3bMdoKGIY22boAWxN0zh5W5OFGvLYYSCRDUk68QN99ICVb",
	"kiX/adMEfehbJPPee+65h4dUHmksMyUFCmto9EhNnGAG/s/TFIz/Q2mpUFuO/inWCBbZO+se/q9xTiP6",
	"v2GdZVilGJ6BxRnPkBYBZWhizZXlUrgwfIBMpUgj+h4Mj0kGNjEk9gUDalfK/WSs5mLho7lRKaw+Qobt",
	"6D993Cgc9UVxdgjhac6ZWyk6iT2gC4EXyYXAvuS5Yl/KQhFQjXc518ho9NnBqyq3G2yTFTT4bla93mCS",
	"N7cYW4fJD+wPbjymFuP0nSCgNayInBO/DB3R3GJmDpLkp1Js6vk8m3JoTj2+T3iXY1m5LZetybdhzRIk",
	"jTcOnU2wREiDJ8qkp1S5gDjWd9faKyqxM/n+pAcEtaWNZic7J11Tb5QUBnu26noHHzHfLQRl6J7aTmfN",
	"yl1CdPUrmUvtWRkuR8O4jCYomJJcOFH3YMbjUHutFwFVsOAC1hLbF3a5WXkGFjpdNxIFGyR7SLjy+/GH",
	"9p+q/UP8vqzA8/Lk2HJQEufesuu+4tuUjePbhyQMw/DuX52JN5MRf61FH3mbc6DPmz/9djqZTN4S1+3Q",
	"8gxJFdgsN3r7ZvoqPHk1Gs/Gk2gcRtNwMB3/01fsV62l7qFLsh0D/H02uyTooohf1Kh7Ep5sKnBhcYHa",
	"lcjQGFj0tUOSPANBNAKDmxSrtOv1zY4+SkvmMhfsoCFWoNZJ+sa2tbU7zc+5NvZKp+2DvuFJvyhY4M+9",
	"yk/hmNBJ76bBh68NVRW/m7hxQDMueJZnNBr1DUWhvuwETQOawUMVFYYHc2hcfiVNVlpoB76eNsqF3XJd",
	"/3VjXrexzlizWMML6oHW8+nqwlXgYi67Oj0XFjXEltxzm5CVzDWJE54yjcL8RCxCnKA2BARztsY1qfof",
	"OFjcelouFIq/4kTKlLy7PKcBXaI2ZfrRIByEjhSpUIDiNKIT/8rN1SZekg1W3eMC/RniROt1fM5o1Dxu",
	"faiGDC1qQ6PPvU6cZzeonRdrNHlqDbGSaLSa4xIJF8T1RRzPrg/uwu5y1Kv1XTRqkF8aqIPUHVtfbZfV",
	"lUslsJ3ZD6a+dpIoDd+zMg7D0ruEReEJAqVSHnuKhremPFvrhAePgq27i5fItoWl3FhH4vq64lRQXw4I",
	"Qws89bfi6TeEV9p2D6ArgQ8KY4usdFO/cUyeZaBXNKKuHwJpuobrFAoLsznm/JvliF677S3NbpWVF0pa",
	"bko09r1kq29Nfvt7oWhbgNU5Fh0BjJ4Lw24JOD1XX14lqwFRUuWpf+EdI0MLDCwMnApOXkIFf0PKWSnA",
	"SgXfh/xKNgkQgff1DbVfgEXQdL3hI2fFIev7gD3O573FGWltLf521pZScKws/D8Cnmw9z3453aFTt7q8",
	"SG2+tU6vzs+I0nLJGbJKoifPr5SPskJzD2tEfrPYBCw5Pxt8L5L9gJZABfVmRbg1nrG9xgk2TnaKtPxS",
	"eUmdPptBtz9qjzLo8LkwHDDoI4X/AnqbJajRqx5c9ZsUs8bFkguV2x+7cHsXllP+so1YFMV/AQAA//+F",
	"jiuJtBYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
