// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// Class defines model for Class.
type Class struct {
	// CreatedAt An RFC3339 date/time string
	CreatedAt   DateTime `json:"createdAt"`
	Description string   `json:"description"`
	DisplayName string   `json:"displayName"`

	// Id A cuid
	Id   Cuid   `json:"id"`
	Name string `json:"name"`

	// UpdatedAt An RFC3339 date/time string
	UpdatedAt DateTime `json:"updatedAt"`
}

// ClassList An array of Classes
type ClassList = []Class

// ClassesCreateRequest defines model for ClassesCreateRequest.
type ClassesCreateRequest struct {
	// Description The description of the Class
	Description *string `json:"description,omitempty"`

	// DisplayName The display name of the Class
	DisplayName string `json:"displayName"`

	// Name The name of the Class
	Name *string `json:"name,omitempty"`
}

// ClassesCreateResponse defines model for ClassesCreateResponse.
type ClassesCreateResponse struct {
	Class Class `json:"class"`
}

// ClassesListResponse The response for the /v1/classes endpoint
type ClassesListResponse struct {
	// Classes An array of Classes
	Classes    ClassList      `json:"classes"`
	Pagination PaginationData `json:"pagination"`
}

// ClassesUpdateRequest defines model for ClassesUpdateRequest.
type ClassesUpdateRequest struct {
	// Description The description of the Class
	Description *string `json:"description,omitempty"`

	// DisplayName The display name of the Class
	DisplayName *string `json:"displayName,omitempty"`

	// Name The name of the Class
	Name *string `json:"name,omitempty"`
}

// ClassesUpdateResponse defines model for ClassesUpdateResponse.
type ClassesUpdateResponse struct {
	Class Class `json:"class"`
}

// Cuid A cuid
type Cuid = string

// DateTime An RFC3339 date/time string
type DateTime = string

// Error defines model for Error.
type Error struct {
	// Code The HTTP error code
	Code int `json:"code"`

	// Message A human readable error message
	Message string `json:"message"`
}

// PaginationData defines model for PaginationData.
type PaginationData struct {
	FirstUrl string `json:"firstUrl"`
	LastUrl  string `json:"lastUrl"`
	NextUrl  string `json:"nextUrl"`
	Page     int    `json:"page"`
	PerPage  int    `json:"perPage"`
	PrevUrl  string `json:"prevUrl"`
	Total    int    `json:"total"`
}

// Teacher defines model for Teacher.
type Teacher struct {
	// CreatedAt An RFC3339 date/time string
	CreatedAt DateTime `json:"createdAt"`
	Email     string   `json:"email"`
	FullName  string   `json:"fullName"`

	// Id A cuid
	Id Cuid `json:"id"`

	// UpdatedAt An RFC3339 date/time string
	UpdatedAt DateTime `json:"updatedAt"`
}

// TeacherList An array of Teachers
type TeacherList = []Teacher

// TeachersCreateRequest defines model for TeachersCreateRequest.
type TeachersCreateRequest struct {
	Email    string `json:"email"`
	FullName string `json:"fullName"`
}

// TeachersCreateResponse defines model for TeachersCreateResponse.
type TeachersCreateResponse struct {
	Teacher Teacher `json:"teacher"`
}

// TeachersListResponse The response for the /v1/teachers endpoint
type TeachersListResponse struct {
	Pagination PaginationData `json:"pagination"`

	// Teachers An array of Teachers
	Teachers TeacherList `json:"teachers"`
}

// TeachersUpdateRequest defines model for TeachersUpdateRequest.
type TeachersUpdateRequest struct {
	Email    string `json:"email"`
	FullName string `json:"fullName"`
}

// TeachersUpdateResponse defines model for TeachersUpdateResponse.
type TeachersUpdateResponse struct {
	Teacher Teacher `json:"teacher"`
}

// ClassesListParams defines parameters for ClassesList.
type ClassesListParams struct {
	// PerPage The number of results to retrieve in each page.
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`

	// Page The page to load.
	Page *int `form:"page,omitempty" json:"page,omitempty"`
}

// TeachersListParams defines parameters for TeachersList.
type TeachersListParams struct {
	// PerPage The number of results to retrieve in each page.
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`

	// Page The page to load.
	Page *int `form:"page,omitempty" json:"page,omitempty"`
}

// ClassesCreateJSONRequestBody defines body for ClassesCreate for application/json ContentType.
type ClassesCreateJSONRequestBody = ClassesCreateRequest

// ClassesUpdateJSONRequestBody defines body for ClassesUpdate for application/json ContentType.
type ClassesUpdateJSONRequestBody = ClassesUpdateRequest

// TeachersCreateJSONRequestBody defines body for TeachersCreate for application/json ContentType.
type TeachersCreateJSONRequestBody = TeachersCreateRequest

// TeachersUpdateJSONRequestBody defines body for TeachersUpdate for application/json ContentType.
type TeachersUpdateJSONRequestBody = TeachersUpdateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all classes
	// (GET /v1/classes)
	ClassesList(c *gin.Context, params ClassesListParams)
	// Create a new class
	// (POST /v1/classes)
	ClassesCreate(c *gin.Context)
	// Delete a class by its CUID
	// (DELETE /v1/classes/{id})
	ClassesDelete(c *gin.Context, id Cuid)
	// Get a class by its CUID
	// (GET /v1/classes/{id})
	ClassesGet(c *gin.Context, id Cuid)
	// Update a class by its CUID
	// (PATCH /v1/classes/{id})
	ClassesUpdate(c *gin.Context, id Cuid)
	// List all teachers
	// (GET /v1/teachers)
	TeachersList(c *gin.Context, params TeachersListParams)
	// Create a new teacher
	// (POST /v1/teachers)
	TeachersCreate(c *gin.Context)
	// Delete a teacher by its CUID
	// (DELETE /v1/teachers/{id})
	TeachersDelete(c *gin.Context, id Cuid)
	// Get a teacher by its CUID
	// (GET /v1/teachers/{id})
	TeachersGet(c *gin.Context, id Cuid)
	// Update a teacher by its CUID
	// (PATCH /v1/teachers/{id})
	TeachersUpdate(c *gin.Context, id Cuid)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ClassesList operation middleware
func (siw *ServerInterfaceWrapper) ClassesList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ClassesListParams

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter perPage: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ClassesList(c, params)
}

// ClassesCreate operation middleware
func (siw *ServerInterfaceWrapper) ClassesCreate(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ClassesCreate(c)
}

// ClassesDelete operation middleware
func (siw *ServerInterfaceWrapper) ClassesDelete(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Cuid

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ClassesDelete(c, id)
}

// ClassesGet operation middleware
func (siw *ServerInterfaceWrapper) ClassesGet(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Cuid

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ClassesGet(c, id)
}

// ClassesUpdate operation middleware
func (siw *ServerInterfaceWrapper) ClassesUpdate(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Cuid

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ClassesUpdate(c, id)
}

// TeachersList operation middleware
func (siw *ServerInterfaceWrapper) TeachersList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TeachersListParams

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter perPage: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.TeachersList(c, params)
}

// TeachersCreate operation middleware
func (siw *ServerInterfaceWrapper) TeachersCreate(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.TeachersCreate(c)
}

// TeachersDelete operation middleware
func (siw *ServerInterfaceWrapper) TeachersDelete(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Cuid

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.TeachersDelete(c, id)
}

// TeachersGet operation middleware
func (siw *ServerInterfaceWrapper) TeachersGet(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Cuid

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.TeachersGet(c, id)
}

// TeachersUpdate operation middleware
func (siw *ServerInterfaceWrapper) TeachersUpdate(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Cuid

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.TeachersUpdate(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/classes", wrapper.ClassesList)

	router.POST(options.BaseURL+"/v1/classes", wrapper.ClassesCreate)

	router.DELETE(options.BaseURL+"/v1/classes/:id", wrapper.ClassesDelete)

	router.GET(options.BaseURL+"/v1/classes/:id", wrapper.ClassesGet)

	router.PATCH(options.BaseURL+"/v1/classes/:id", wrapper.ClassesUpdate)

	router.GET(options.BaseURL+"/v1/teachers", wrapper.TeachersList)

	router.POST(options.BaseURL+"/v1/teachers", wrapper.TeachersCreate)

	router.DELETE(options.BaseURL+"/v1/teachers/:id", wrapper.TeachersDelete)

	router.GET(options.BaseURL+"/v1/teachers/:id", wrapper.TeachersGet)

	router.PATCH(options.BaseURL+"/v1/teachers/:id", wrapper.TeachersUpdate)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
